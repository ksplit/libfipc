# Process this file with autoconf to produce a configure script.

AC_PREREQ([2.68])
AC_INIT([libfipc], [0.1])
AC_CONFIG_SRCDIR([src/common/ipc.c])
AC_CONFIG_AUX_DIR(autoconf)
AC_CONFIG_HEADERS([config.h])

LT_INIT
AC_CONFIG_MACRO_DIR([m4])
AM_INIT_AUTOMAKE([subdir-objects foreign])

# --------------------------------------------------
# libfipc features, packages, and config
# --------------------------------------------------

# Platform = kernel
# (other platforms to be added later ... )
AC_ARG_VAR([PLATFORM],
    [The platform to build for @{:@kernel@:}@ (default=kernel)])
AS_CASE([$PLATFORM],
    [kernel],
    [PLATFORM_DIR=platform/kernel],
    [*],
    [
        AC_MSG_NOTICE([PLATFORM (val=$PLATFORM) unset or invalid.])
        AC_MSG_NOTICE([Defaulting to PLATFORM=kernel.])
        PLATFORM=kernel
        PLATFORM_DIR=platform/kernel
    ])
AC_MSG_NOTICE([Building for PLATFORM=$PLATFORM.])
AC_SUBST(PLATFORM)
AC_SUBST(PLATFORM_DIR)

# Build kernel test modules?
AS_IF([test "x$PLATFORM" = "xkernel"],

    [
        AC_ARG_ENABLE([kernel_tests_build],
            [AS_HELP_STRING([--enable-kernel-tests-build],
                [Enable building kernel test modules (default=no)])],
                [],
                [enable_kernel_tests_build="no"])
        AM_CONDITIONAL(ENABLE_KERNEL_TESTS_BUILD, 
            [test "x$enable_kernel_tests_build" = "xyes"])
        AM_COND_IF([ENABLE_KERNEL_TESTS_BUILD],
            [AC_MSG_NOTICE([Building kernel tests.])],
            [AC_MSG_NOTICE([Not building kernel tests.])])

    ],

    [

        AM_CONDITIONAL(ENABLE_KERNEL_TESTS_BUILD, 
            [false])

    ])

# --------------------------------------------------
# Checks for programs.
# --------------------------------------------------

AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_LIBTOOL
AC_PROG_LN_S
AC_PROG_MKDIR_P
AC_PROG_INSTALL

# --------------------------------------------------
# Checks for libraries.
# --------------------------------------------------

# Check for kernel build system
AS_IF([test "x$PLATFORM" = "xkernel"],

    [
        KDIR=/lib/modules/`uname -r`/build # default location of build system

        AC_ARG_WITH([kernel-headers],
            [AS_HELP_STRING([--with-kernel-headers=DIRECTORY],
                [find Linux kernel build stuff in DIRECTORY])],
            [KDIR="$with_kernel_headers"])

        # Sanity check it (in the future, we could maybe check the
        # kernel version in the top of the kernel Makefile)
        AC_CHECK_FILE($KDIR/Makefile,
            [AC_MSG_NOTICE([Found kernel Makefile in $KDIR])],
            [AC_MSG_ERROR([Could not find kernel Makefile in $KDIR!])])


        AC_SUBST(KDIR)

    ])

# --------------------------------------------------
# Checks for types
# --------------------------------------------------

# --------------------------------------------------
# Checks for structures
# --------------------------------------------------

# --------------------------------------------------
# Checks for compiler characteristics
# --------------------------------------------------

# --------------------------------------------------
# Checks for library functions.
# --------------------------------------------------

# --------------------------------------------------
# Misc
# --------------------------------------------------

# I can't remember if there is a standard way to do this
FIPC_AUTOCONF_NOTICE="This file was autogenerated by configure."
AC_SUBST(FIPC_AUTOCONF_NOTICE)

# --------------------------------------------------
# Config files
# --------------------------------------------------

AC_CONFIG_FILES(
  Makefile

  src/Makefile
  src/common/Makefile

  src/include/Makefile

  src/platform/Makefile
  src/platform/kernel/Makefile
  src/platform/kernel/Kbuild.in
  src/platform/kernel/include/Makefile
  src/platform/kernel/tests/Makefile
  src/platform/kernel/tests/Kbuild.in
)
AC_OUTPUT

